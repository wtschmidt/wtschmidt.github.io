////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
function range(start, end, step = start < end ? 1 : -1) {
  let arr = []
  if (start === end) return []
  if (step > 0) {
    for (let i = start; i <= end; i += step) {
      arr.push(i)
    }
  } else {
    for (let i = start; i >= end; i += step){
      arr.push(i)
    }
  }
  
  return arr
}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  var sum = 0;
  for (let i = 0; i < array.length; i++){
    sum += array[i]
  }
  return sum
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  var arr = []
  for (let i = array.length - 1; i > -1; i--){
    arr.push(array[i])
  }
  return arr
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for (let i = 0; i < Math.floor(array.length / 2); i ++){
    let last = array[i];
    array[i] = array[array.length - 1 - i];
    array[array.length - 1 - i] = last;
  }
  return array
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  var list = null
  for (var i = array.length - 1; i > -1; i--){
    list = {value: array[i], rest: list}
  }
  return list
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(elements) {
  let arr = []
  for (let i = elements; i; i = i.rest) {
    arr.push(i.value);
  }
  return arr
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  return {value: element, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, element) {
  if(!list){
    return undefined
  } else if (element === 0){
    return list.value
  } else {
    return nth(list.rest, element - 1)
  }
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  
  if (val1 === val2) return true;
  if (val1 === null || val2 === null || typeof val1 != 'object' || typeof val2 != 'object'){
    return false
  }
  let key1 = Object.keys(val1)
  let key2 = Object.keys(val2)
  
  if (key1.length != key2.length) return false
  for (let key of key1){
    if (!key2.includes(key) || !deepEqual(val1[key], val2[key])){
      return false
    }
  }
  return true
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
